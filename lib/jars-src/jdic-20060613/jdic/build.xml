<?xml version="1.0"?>
<project name="JDIC API source code building script" default="buildall" basedir=".">

<!--
This is the master build script for use with the Jakarta Ant build tool 
to build the source code of JDIC project.

For Ant, see http://jakarta.apache.org/ant/index.html

Top-level target:
  buildall:         Build a JDIC API distribution for the current platform. 
                    Which will run one of below targets:
    buildwin32:     on Windows to build a Windows distribuition.
    buildlinux:     on Linux to build a Linux distribuition.
    buildsolaris:   on Solaris to build a Solaris distribuition.
    buildfreebsd:   on FreeBSD to build a FreeBSD distribuition.
    buildmac_os_x:  on Mac OS X to build a Mac OS X distribuition.
    buildtray:      Build the Tray Icon API (package org.jdesktop.jdic.tray) 
                    binary for the current platform.
    buildtest:			build ut test cases
    runtest:				run ut test cases
    clean:            Remove the generated distribution (including files and directories).

-->
  

  <!-- the top-level package names -->    
  <property environment="env"/>
  <property name="pkg.jdic.name"      value="org.jdesktop.jdic" />
  <property name="pkg.desktop.name"   value="${pkg.jdic.name}.desktop" /> 
  <property name="pkg.filetypes.name" value="${pkg.jdic.name}.filetypes" />
  <property name="pkg.browser.name"   value="${pkg.jdic.name}.browser" />
  <property name="pkg.tray.name"      value="${pkg.jdic.name}.tray" />
  <property name="pkg.init.name"      value="${pkg.jdic.name}.init" />
  

  <!-- the path of source directory -->
  <property name="readme.dir"        value="../" />
  <property name="src.dir"           value="src" />
  <property name="test.dir"          value="test"/>
  <property name="share.classes.dir" value="${src.dir}/share/classes" />
  <property name="unix.classes.dir"  value="${src.dir}/unix/classes" />
  <property name="win32.classes.dir" value="${src.dir}/win32/classes" />
  <property name="mac.classes.dir"   value="${src.dir}/mac_os_x/classes" />

  <!-- the path of file defmailer.properties defining the default mailer 
       location on Linux/Solaris/FreeBSD -->
  <property name="unix.classes.defmailer.dir"  
            value="${src.dir}/unix/classes/org/jdesktop/jdic/desktop/internal/impl/" />

  <property name="unix.native.dir"         value="${src.dir}/unix/native" />    
  <property name="unix.native.jni.dir"     value="${unix.native.dir}/jni" />
  <property name="unix.native.mozilla.dir" value="${unix.native.dir}/mozilla" />

  <property name="win32.native.dir"         value="${src.dir}/win32/native" />    
  <property name="win32.native.jni.dir"     value="${win32.native.dir}/jni" />
  <property name="win32.native.ie.dir"      value="${win32.native.dir}/ie" />
  <property name="win32.native.mozilla.dir" value="${win32.native.dir}/mozilla" />

  <property name="mac.native.dir"         value="${src.dir}/mac_os_x/native" />    
  <property name="mac.native.jni.dir"     value="${mac.native.dir}/jni" />

  <!-- the distribution version and release of this build -->
  <!-- which is only used in javadoc target -->
  <property name="version" value="2006" />
  <property name="release" value="0308" />

  <!-- the generated jar file name -->
  <property name="jar.file" value="jdic.jar" />
  
  <property name="toDebug" value="off"/>

  <target name="showtargets" description="default target showing all available targets">
    <echo>The top-level targets are:</echo>
    <echo> buildall:  Build a JDIC API distribution for the current platform</echo>
    <echo>            (Windows, Linux, Solaris, FreeBSD or Mac OS X).</echo>
    <echo> buildtray: Build the Tray Icon API binary for the current platform</echo>
    <echo>            (Windows, Linux or Solaris).</echo>
    <echo> clean:     Remove the generated distribution.</echo>
    <echo></echo>
    <echo>The generated distribution is put under *dist* directory.</echo>
  </target>

  <!--
    - SHARED TARGETS FOR WIN32/UNIX DISTRIBUTIONS
    -->
  <target name="init" description="the init target">
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Set platform-dependent distribution directory -->
    <!-- ${file.separator} is "\" on Windows, and "/" on Unix -->
    <condition property="dist.dir" value="dist${file.separator}windows">
      <os family="windows" />      
    </condition> 

    <condition property="dist.dir" value="dist/linux">
      <os name="linux"/>      
    </condition> 

    <condition property="dist.dir" value="dist/solaris_sparc">
      <os name="sunos" arch="sparc"/>      
    </condition> 

    <condition property="dist.dir" value="dist/solaris_x86">
      <os name="sunos" arch="x86"/>      
    </condition> 

    <condition property="dist.dir" value="dist/freebsd">
      <os name="freebsd"/>      
    </condition> 

    <condition property="dist.dir" value="dist/mac_os_x">
      <os name="Mac OS X"/>
    </condition> 

    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}" />   

    <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <echo>+ JDIC API build version ${version} release ${release}</echo>
    <echo>+ The distribution directory is: .${file.separator}${dist.dir}${file.separator}</echo> 
    <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
  </target>

  <!-- *** Top-level target *** -->
  <!-- *** Clean the distribution directory *** -->
  <target name="clean" depends="init"
          description="clean up the built directory and files">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}"/>
    </delete>
  </target>


  <!-- *** Top-level target *** -->
  <!-- *** Build a JDIC API distribution for the current platform *** -->  
  <target name="buildall"
          description="build a distribution for the current platform.">          
    <!-- Set the platform-dependent buildall target -->
    <condition property="platform.target" value="buildwin32">
      <os family="windows" />      
    </condition> 

    <condition property="platform.target" value="buildlinux">
      <os name="linux"/>      
    </condition> 

    <condition property="platform.target" value="buildsolaris">
      <os name="sunos"/>      
    </condition>  

    <condition property="platform.target" value="buildfreebsd">
      <os name="freebsd"/>      
    </condition> 
    
    <condition property="platform.target" value="buildmac_os_x">
      <os name="Mac OS X" />      
    </condition>

    <antcall target="${platform.target}" />
    
    <!-- build demo applications into .class files -->
    
    <antcall target="copyreadme" />
  </target>
  
  <!--copy readme changelog and copyright files-->
  <target name="copyreadme" depends="init">
  	<copy file="${readme.dir}/README.html" todir="${dist.dir}" />
  	<copy file="${readme.dir}/COPYING" todir="${dist.dir}" />
  	<copy file="${readme.dir}/ChangeLog" todir="${dist.dir}" />
  </target>

  <!-- *** javadoc *** -->
  <!-- disable author and version tags output -->
  <target name="javadoc" depends="init"
          description="generate javadoc into ${dist.dir}/javadoc" >
    <javadoc packagenames="${pkg.desktop.name}, ${pkg.filetypes.name}, ${pkg.browser.name}, ${pkg.tray.name},${pkg.init.name}"
             sourcepath="${share.classes.dir}"
             destdir="${dist.dir}/javadoc"            
             author="false"
             version="false"
             use="true"
             Windowtitle="JDIC API V${version} Release ${release}"
             Header="JDIC API V${version} Release ${release}">
             <docTitle><![CDATA[JDIC (JDesktop Integration Components) 
               <br> API Specification, Version ${version} Release ${release}]]></docTitle>
             <bottom><![CDATA[<font size="-1">For more information and documentation on JDIC, 
               see <a href="https://jdic.dev.java.net">JDIC website</a>. <p>That documentation 
               contains more detailed, developer-targeted descriptions, with conceptual 
               overviews, working code examples, license terms and bug report information.
               <p>Copyright (c) 2004 Sun Microsystems, Inc. All rights reserved. Use is 
               subject to <a href=
               "https://jdic.dev.java.net/source/browse/jdic/src/COPYING">license terms</a>. 
               </font>]]></bottom>
    </javadoc>
  </target>

  <!--
    - WIN32 DISTRIBUTION
    -->
  <target name="buildwin32" depends="buildwin32jar, javadoc, buildwin32jni, buildwin32embed"
          description="build java and native source code for Win32 platform" >
  </target>

  <!-- *** Build Win32 jar file *** -->  
  <target name="buildwin32jar" depends="init"
          description="build the classes and jar file." >
    <!-- generate class files that will run on VMs in JDK 1.4 and later -->    
    <javac debug="${toDebug}" srcdir="${share.classes.dir}:${win32.classes.dir}"
           destdir="${dist.dir}"
           classpath="${dist.dir}" 
           target="1.4"
           source="1.4"
    />

    <jar destfile="../../dist/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>
  </target>

  <!-- *** Build Win32 native JNI code *** -->
  <target name="buildwin32jni" depends="init"
          description="build native jni libraries." >
    <!-- build jdic.dll -->
    <exec dir="${win32.native.jni.dir}" executable="nmake" 
      failonerror="yes" >
      <arg line='/f jdic.mak CFG="jdic - Win32 Release"'/>
    </exec>                   

    <!-- build tray.dll containing the Tray Icon native code -->
    <exec dir="${win32.native.jni.dir}" executable="nmake" 
      failonerror="yes" >
      <arg line='/f jdic.mak CFG="jdic - Win32 Tray"'/>
    </exec>                   

    <!-- copy generated .dll file -->
    <copy file="${win32.native.jni.dir}/Release/jdic.dll" todir="${dist.dir}" />
    <copy file="${win32.native.jni.dir}/Release/tray.dll" todir="${dist.dir}" />
  </target>

  <!-- *** Build Win32 native embeded browser code *** -->
  <target name="buildwin32embed" depends="init">
    <exec dir="${win32.native.ie.dir}" executable="nmake" failonerror="yes">
      <arg line='/f IeEmbed.mak CFG="IeEmbed - Win32 Release"'/>
    </exec>

    <exec dir="${win32.native.mozilla.dir}" executable="nmake" failonerror="yes">
      <arg line='/f MozEmbed.mak CFG="MozEmbed - Win32 Release"'/>
    </exec>

    <!-- copy the embeded IE and Mozilla executable -->
    <copy file="${win32.native.ie.dir}/Release/IeEmbed.exe" todir="${dist.dir}" />
    <copy file="${win32.native.mozilla.dir}/Release/MozEmbed.exe" todir="${dist.dir}" />
  </target>

  <!--
    - LINUX DISTRIBUTION
    -->
  <target name="buildlinux" depends="buildunixjar"
          description="build java and native source code for Linux platform" >
  </target>

  <!--
    - SOLARIS DISTRIBUTION
    -->
  <!-- This target is the same with buildlinux. -->
  <target name="buildsolaris" depends="buildlinux"
          description="build java and native source code for Solaris platform" >
  </target>

  <!--
    - FREEBSD DISTRIBUTION
    -->
  <!-- This target is the same with buildlinux. -->
  <target name="buildfreebsd" depends="buildunixjar, javadoc, buildbsdjni, buildbsdembed"
          description="build java and native source code for FreeBSD platform" >
  </target>

  <!--
    - SHARED TARGETS FOR UNIX DISTRIBUTIONS
    -->

  <property name="jars" value="../../dist"/>

  <path id="unix-classpath">
    <!-- Change this path to your java home -->
    <fileset dir="${jars}" includes="*.jar" excludes="jdic.jar"/>
    <pathelement path="${dist.dir}"/>
  </path>

  <!-- *** Build Unix jar file *** -->  
  <target name="buildunixjar" depends="init"
          description="build the classes and jar file." >
    <javac debug="${toDebug}" srcdir="${share.classes.dir}:${unix.classes.dir}"
           destdir="${dist.dir}"
           target="1.4"
           source="1.4">
	<classpath refid="unix-classpath"/>
    </javac>

    <jar destfile="../../dist/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
         <fileset dir="${unix.classes.dir}" includes="org/**/*.png" />
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>

    <!-- !!! As an additional operation, copy defmailer.properties file 
         defining the default mailer location to the same location !!! -->
    <copy file="${unix.classes.defmailer.dir}/defmailer.properties" 
          todir="${dist.dir}" />
  </target>

  <!-- *** Build BSD native JNI code *** -->
  <target name="buildbsdjni" depends="init"
          description="build native jni libraries." >
    <exec dir="${unix.native.jni.dir}" executable="gmake" failonerror="yes" />

    <!-- copy generated .so file -->
    <copy file="${unix.native.jni.dir}/libjdic.so" todir="${dist.dir}" />
    <copy file="${unix.native.jni.dir}/libtray.so" todir="${dist.dir}" />
	
	<copy file="${unix.native.jni.dir}/libjdic.so" todir="../../dist/" />
	<copy file="${unix.native.jni.dir}/libtray.so" todir="../../dist/" />
  </target>

  <!-- *** Build BSD native embeded browser code *** -->
  <target name="buildbsdembed" depends="init">

  </target>  

  <!-- *** Build Unix native JNI code *** -->
  <target name="buildunixjni" depends="init"
          description="build native jni libraries." >
    <exec dir="${unix.native.jni.dir}" executable="make" failonerror="yes" />

    <!-- copy generated .so file -->
    <copy file="${unix.native.jni.dir}/libjdic.so" todir="${dist.dir}" />
    <copy file="${unix.native.jni.dir}/libtray.so" todir="${dist.dir}" />
	
	<copy file="${unix.native.jni.dir}/libjdic.so" todir="../../dist/" />
	<copy file="${unix.native.jni.dir}/libtray.so" todir="../../dist/" />
  </target>

  <!-- *** Build Unix native embeded browser code *** -->
  <target name="buildunixembed" depends="init">
  </target>

  <!--
    - Targets name beginning with a hyphen can be used to name targets
    - that should not be called directly from the command line.
    -->
  <target name="-copymozembed" depends="init" >
    <copy todir="${dist.dir}">
      <fileset dir="${unix.native.mozilla.dir}" includes="*mozembed-*-gtk*"/>
    </copy>
    <chmod dir="${dist.dir}" perm="+x" includes="*mozembed-*-gtk*" />
  </target>

  <!--
    - MAC OS X DISTRIBUTION
    -->
  <target name="buildmac_os_x" depends="buildmacjar, javadoc, buildmacjni"
          description="build java and native source code for Mac OS X" >
  </target>

  <!-- *** Build Mac jar file *** -->
 <path id="mac-classpath">
    <fileset dir="/System/Library/Frameworks/JavaVM.framework/Resources/Deploy.bundle/Contents/Home/lib/">
      <include name="javaws.jar" />
    </fileset>
    <pathelement path="${dist.dir}"/>
  </path>  
  
  <target name="buildmacjar" depends="init"
          description="build the classes and jar file." >
    <javac debug="${toDebug}" srcdir="${share.classes.dir}:${mac.classes.dir}"
           destdir="${dist.dir}"
           target="1.4"
           source="1.4">
      <classpath refid="mac-classpath"/>
    </javac>

    <jar destfile="../../dist/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
    </jar>
  </target>

  <!-- *** Build Mac native JNI code *** -->
  <target name="buildmacjni" depends="init"
          description="build native jni libraries." >
    <exec dir="${mac.native.jni.dir}" executable="make" failonerror="yes" />

    <!-- copy generated .jnilib file -->
    <copy file="${mac.native.jni.dir}/libjdic.jnilib" todir="${dist.dir}" />
	<copy file="${mac.native.jni.dir}/libjdic.jnilib" todir="../../dist/" />
  </target>

  <!-- *** Build demo applications into .class files *** -->
  <target name="builddemo" depends="init"
    description="build demo classes">        
    <!-- the path of demo directory -->
    <property name="demo.dir"               value="demo" />
    <property name="demo.browser.dir"       value="${demo.dir}/Browser" />
    <property name="demo.filechooser.dir"   value="${demo.dir}/FileChooser" />
    <property name="demo.fileexplorer.dir"  value="${demo.dir}/FileExplorer" />        
    <property name="demo.filetypes.dir"     value="${demo.dir}/FileTypes" />
    <property name="demo.simplebrowser.dir" value="${demo.dir}/SimpleBrowser" />
    <property name="demo.tray.dir"          value="${demo.dir}/Tray" />

    <!-- remove the ".class" files to rebuild the demo apps -->
    <delete failonerror="false">
      <fileset dir="${demo.dir}" includes="**/*.class"/>
    </delete>

    <!-- TO BE DONE: below tasks should be combined to one task -->
    <javac debug="${toDebug}" srcdir="${demo.browser.dir}"
           destdir="${demo.browser.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />
    <javac debug="${toDebug}" srcdir="${demo.filechooser.dir}"
           destdir="${demo.filechooser.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />
    <javac debug="${toDebug}" srcdir="${demo.fileexplorer.dir}"
           destdir="${demo.fileexplorer.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />
    <javac debug="${toDebug}" srcdir="${demo.filetypes.dir}"
           destdir="${demo.filetypes.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />
    <javac debug="${toDebug}" srcdir="${demo.simplebrowser.dir}"
           destdir="${demo.simplebrowser.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />        
    <javac debug="${toDebug}" srcdir="${demo.tray.dir}"
           destdir="${demo.tray.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />        

    <!-- Copy demo apps to a "demo" directory under the distribution directory -->    
    <!-- NOTE: specifies only the *necessary* demo files to avoid copying 
         unnecessary files. -->    
    <mkdir dir="${dist.dir}/demo" />   
    <copy todir="${dist.dir}/demo">
      <fileset dir="${demo.dir}" 
           casesensitive="false" 
           includes="README,
               Browser/*.java, Browser/*.class, Browser/images/**/,
               FileChooser/*.java, FileChooser/*.class, FileChooser/images/**,
               FileExplorer/*.java, FileExplorer/*.class, FileExplorer/images/**,
               FileTypes/*.java, FileTypes/*.class, FileTypes/images/**,
               SimpleBrowser/*.java, SimpleBrowser/*.class, SimpleBrowser/images/**,
               Tray/*.java, Tray/*.class, Tray/images/**" >
      </fileset>
    </copy>
  </target>

   <!--Attention: pre set junit.jar to classpath to build these tests-->
  <target name="buildtest" depends="init"
    description="build test classes">    
    <echo message="ATTENTION: Pre set junit.jar to classpath to build these tests!"/>

    <delete failonerror="false">
      <fileset dir="${test.dir}" includes="*.xml,**/*.xml, **/*.class,*.class,*.bak"/>
    </delete>         
     <javac debug="${toDebug}" srcdir="${test.dir}"
           destdir="${test.dir}"
           classpath="${dist.dir}/${jar.file}" 
           target="1.4"
           source="1.4"
    />    
  </target>
  
  <!--Attention: pre set junit.jar to classpath to run these tests-->
  <target name="runtest" depends="init" description="run test classes">
    <echo message="ATTENTION: Pre set junit.jar to classpath to run these tests!"/>
    <!--define classpath-->
    <path id="appclasspath">
      <fileset dir="${dist.dir}">
          <include name="*.jar"/>
      </fileset>
      <pathelement location="${test.dir}"/>
    </path>
    <junit haltonfailure="false"
        printsummary="withOutAndErr">
      <classpath refid="appclasspath"/>
      <batchtest todir="${test.dir}">
         <fileset dir="${test.dir}" includes="ut/bm/*Test*.class"/>         
      </batchtest>
        <formatter type="xml"/>
    </junit>
  </target>


  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- *********** Build Tray Icon API *********** -->
  <!-- ***** package org.jdesktop.jdic.tray ****** -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <property name="pkg.tray.dir"      value="org/jdesktop/jdic/tray" />  

  <!-- the path of source directory -->
  <property name="share.classes.tray.dir" value="${share.classes.dir}/${pkg.tray.dir}" />
  <property name="win32.classes.tray.dir" value="${win32.classes.dir}/${pkg.tray.dir}" />  
  <property name="unix.classes.tray.dir"  value="${unix.classes.dir}/${pkg.tray.dir}" />  

  <!-- *** Top-level target *** -->
  <!-- *** Build a Tray Icon API binary for the current platform *** -->
  <!-- *** First clean the distribution directory *** -->
  <target name="buildtray" depends="clean"
          description="build a distribution for the current platform.">
    <!-- Set the platform-dependent buildall target -->
    <condition property="platform.target" value="buildwin32_tray">
      <os family="windows" />      
    </condition> 

    <condition property="platform.target" value="buildlinux_tray">
      <os name="linux"/>      
    </condition> 

    <condition property="platform.target" value="buildsolaris_tray">
      <os name="sunos"/>      
    </condition>  

    <antcall target="${platform.target}" />
  </target>

  <!--
    - WIN32 DISTRIBUTION
    -->
  <target name="buildwin32_tray" depends="buildwin32jar_tray, buildwin32jni_tray"
          description="build java and native source code for Win32 platform" >
  </target>

  <!-- *** Build Win32 jar file *** -->  
  <target name="buildwin32jar_tray" depends="init"
          description="build the classes and jar file." >
    <javac debug="${toDebug}" srcdir="${share.classes.tray.dir}:${win32.classes.tray.dir}"
           destdir="${dist.dir}"
           classpath="${dist.dir}" 
           target="1.4"
           source="1.4"
    />

    <jar destfile="../../dist/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>
  </target>

  <!-- *** Build Win32 native JNI code *** -->
  <target name="buildwin32jni_tray" depends="init"
          description="build native jni libraries." >

    <exec dir="${win32.native.jni.dir}" executable="nmake" 
      failonerror="yes" >
      <arg line='/f jdic.mak CFG="jdic - Win32 Tray"'/>
    </exec>                   

    <!-- copy generated .dll file -->
    <copy file="${win32.native.jni.dir}/Release/tray.dll" todir="${dist.dir}" />    
  </target>

  <!--
    - LINUX DISTRIBUTION
    -->
  <target name="buildlinux_tray" depends="buildunixjar_tray, buildunixjni_tray"
          description="build java and native source code for Linux platform" >
  </target>

  <!--
    - SOLARIS DISTRIBUTION
    -->
  <!-- This target is the same with buildlinux_tray -->
  <target name="buildsolaris_tray" depends="buildlinux_tray"
          description="build java and native source code for Solaris platform" >
  </target>

  <!--
    - SHARED TARGETS FOR LINUX/SOLARIS DISTRIBUTIONS
    -->
  <!-- *** Build Unix jar file *** -->  
  <target name="buildunixjar_tray" depends="init"
          description="build the classes and jar file." >
    <javac debug="${toDebug}" srcdir="${share.classes.dir}:${unix.classes.dir}"
           destdir="${dist.dir}"
           classpath="${dist.dir}" 
           target="1.4"
           source="1.4"
    />

    <jar destfile="../../dist/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
         <fileset dir="${unix.classes.dir}" includes="org/**/*.png"/>
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>
  </target>

  <!-- *** Build Unix native JNI code *** -->
  <target name="buildunixjni_tray" depends="init"
          description="build native jni libraries." >
    <exec dir="${unix.native.jni.dir}" executable="make" failonerror="yes" >
      <arg line="tray"/>
    </exec>

    <!-- copy generated .so file -->
    <copy file="${unix.native.jni.dir}/libtray.so" todir="${dist.dir}" />
	
	<copy file="${unix.native.jni.dir}/libtray.so" todir="../../dist/" />
  </target>

</project>
