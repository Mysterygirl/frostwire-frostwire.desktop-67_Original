<?xml version="1.0"?>
<project name="Floating Dock source code building script" default="showtargets" basedir=".">

  <property name="pkg.dock.name"      value="${pkg.jdic.name}.dock" />

  <!-- the path of source directory -->
  <property name="src.dir"           value="src" />
  <property name="share.classes.dir" value="${src.dir}/share/classes" />
  <property name="unix.classes.dir"  value="${src.dir}/unix/classes" />
  <property name="win32.classes.dir" value="${src.dir}/win32/classes" />

  <property name="unix.native.dir"         value="${src.dir}/unix/native" />    
  <property name="unix.native.jni.dir"     value="${unix.native.dir}/jni" />

  <property name="win32.native.dir"         value="${src.dir}/win32/native" />    
  <property name="win32.native.jni.dir"     value="${win32.native.dir}/jni" />

  <!-- the distribution version and release of this build -->
  <!-- which is only used in javadoc target -->
  <property name="version" value="0.0" />
  <property name="release" value="1" />

  <!-- the generated jar file name -->
  <property name="jar.file" value="floatingdock.jar" />

  <target name="showtargets" description="default target showing all available targets">
    <echo>The top-level targets are:</echo>
    <echo> buildall:  Build a Floating Dock API distribution for the current platform</echo>
    <echo>            (Windows, Linux, Solaris)</echo>
    <echo> builddemo: Build the FLoating Dock Demo</echo>
    <echo> buildjnlp: Build signed jar files, ready for Java Webstart deployment</echo>
    <echo>            needs keystore, alias and password properties defined in build.xml</echo>
    <echo>            or an ant properties file</echo>
    <echo> clean:     Remove the generated distribution.</echo>
    <echo></echo>
    <echo>The generated distribution is put under *dist* directory.</echo>
  </target>

  <!--
    - SHARED TARGETS FOR WIN32/UNIX DISTRIBUTIONS
    -->
  <target name="init" description="the init target">
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Set platform-dependent distribution directory -->
    <!-- ${file.separator} is "\" on Windows, and "/" on Unix -->
    <condition property="dist.dir" value="dist${file.separator}windows">
      <os family="windows" />      
    </condition> 

    <condition property="dist.dir" value="dist/linux">
      <os name="linux"/>      
    </condition> 

    <condition property="dist.dir" value="dist/solaris_sparc">
      <os name="sunos" arch="sparc"/>      
    </condition> 

    <condition property="dist.dir" value="dist/solaris_x86">
      <os name="sunos" arch="x86"/>      
    </condition> 

    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}" />   

    <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
    <echo>+ Floating Dock API build version ${version} release ${release}</echo>
    <echo>+ The distribution directory is: .${file.separator}${dist.dir}${file.separator}</echo> 
    <echo>++++++++++++++++++++++++++++++++++++++++++++++++++++</echo>
  </target>

  <!-- *** Top-level target *** -->
  <!-- *** Clean the distribution directory *** -->
  <target name="clean" depends="init"
          description="clean up the built directory and files">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}"/>
    </delete>
  </target>

  <target name="buildjnlp" depends="buildall">
        <echo level="info">Signing JARS...</echo>
	<copy file="${dist.dir}/floatingdock.jar" todir="${dist.dir}/demo/jnlp"/>
        <signjar jar="${dist.dir}/demo/jnlp/floatingdock.jar" keystore="${keystore}" alias="${alias}" storepass="${password}"/>
	<copy file="${dist.dir}/floatingdock-native.jar" todir="${dist.dir}/demo/jnlp"/>
        <signjar jar="${dist.dir}/demo/jnlp/floatingdock-native.jar" keystore="${keystore}" alias="${alias}" storepass="${password}"/>
	<copy file="${dist.dir}/demo/dockdemo.jar" todir="${dist.dir}/demo/jnlp"/>
	<signjar jar="${dist.dir}/demo/jnlp/dockdemo.jar" keystore="${keystore}" alias="${alias}" storepass="${password}"/>
	<copy file="demo/Dock/FloatingDock.jnlp" todir="${dist.dir}/demo/jnlp"/>
  </target>


  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- *********** Build Floating Dock API *********** -->
  <!-- ***** package org.jdesktop.jdic.dock ****** -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <!-- ******************************************* -->
  <property name="pkg.dock.dir"      value="org/jdesktop/jdic/dock" />  

  <!-- the path of source directory -->
  <property name="share.classes.dock.dir" value="${share.classes.dir}/${pkg.dock.dir}" />
  <property name="win32.classes.dock.dir" value="${win32.classes.dir}/${pkg.dock.dir}" />  
  <property name="unix.classes.dock.dir"  value="${unix.classes.dir}/${pkg.dock.dir}" />  

  <!-- *** Top-level target *** -->
  <!-- *** Build a Floating Dock API binary for the current platform *** -->
  <!-- *** First clean the distribution directory *** -->
  <target name="buildall" depends="clean"
          description="build a distribution for the current platform.">
    <!-- Set the platform-dependent buildall target -->
    <condition property="platform.target" value="buildwin32_dock">
      <os family="windows" />      
    </condition> 

    <condition property="platform.target" value="buildlinux_dock">
      <os name="linux"/>      
    </condition> 

    <condition property="platform.target" value="buildsolaris_dock">
      <os name="sunos"/>      
    </condition>  

    <antcall target="${platform.target}" />

    <antcall target="builddemo" />
  </target>

  <!--
    - WIN32 DISTRIBUTION
    -->
  <target name="buildwin32_dock" depends="buildwin32jar_dock, buildwin32jni_dock"
          description="build java and native source code for Win32 platform" >
  </target>

  <!-- *** Build Win32 jar file *** -->  
  <target name="buildwin32jar_dock" depends="init"
          description="build the classes and jar file." >
    <javac srcdir="${share.classes.dock.dir}:${win32.classes.dock.dir}"
           destdir="${dist.dir}"
           classpath="${dist.dir}" 
           target="1.4"
           source="1.4"
    />

    <jar destfile="${dist.dir}/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>
  </target>

  <!-- *** Build Win32 native JNI code *** -->
  <target name="buildwin32jni_dock" depends="init"
          description="build native jni libraries." >

    <exec dir="${win32.native.jni.dir}" executable="nmake" 
      failonerror="yes" >
      <arg line="/f jdic.mak CFG=DOCK"/>
    </exec>                   

    <!-- copy generated .dll file -->
    <copy file="${win32.native.jni.dir}/Release/dock.dll" todir="${dist.dir}" />    
  </target>

  <!--
    - LINUX DISTRIBUTION
    -->
  <target name="buildlinux_dock" depends="buildunixjar_dock, buildunixjni_dock"
          description="build java and native source code for Linux platform" >
  </target>

  <!--
    - SOLARIS DISTRIBUTION
    -->
  <!-- This target is the same with buildlinux_dock -->
  <target name="buildsolaris_dock" depends="buildlinux_dock"
          description="build java and native source code for Solaris platform" >
  </target>

  <!--
    - SHARED TARGETS FOR LINUX/SOLARIS DISTRIBUTIONS
    -->
  <!-- *** Build Unix jar file *** -->  
  <target name="buildunixjar_dock" depends="init"
          description="build the classes and jar file." >
    <javac srcdir="${share.classes.dir}:${unix.classes.dir}"
           destdir="${dist.dir}"
           classpath="${dist.dir}" 
           target="1.4"
           source="1.4"
    />

    <jar destfile="${dist.dir}/${jar.file}" update="false">
         <fileset dir="${dist.dir}" includes="org/**/*.class"/>
    </jar>

    <!-- remove the generated "org" directory -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}/org"/>
    </delete>
  </target>

  <!-- *** Build Unix native JNI code *** -->
  <target name="buildunixjni_dock" depends="init"
          description="build native jni libraries." >
    <exec dir="${unix.native.jni.dir}" executable="make" failonerror="yes" >
      <arg line="dock"/>
    </exec>

    <!-- copy generated .so file -->
    <copy file="${unix.native.jni.dir}/libfloatingdock.so" todir="${dist.dir}" />

    <!-- generate native jar file -->
    <jar destfile="${dist.dir}/floatingdock-native.jar" update="false">
         <fileset dir="${dist.dir}" includes="*.so"/>
    </jar>
  </target>

  <!-- *** Build demo applications into .class files *** -->
  <target name="builddemo" depends="init"
    description="build demo classes">
    <!-- the path of demo directory -->
    <property name="demo.dir"               value="demo" />
    <property name="demo.dock.dir"          value="${demo.dir}/Dock" />

    <!-- remove the ".class" files to rebuild the demo apps -->
    <delete failonerror="false">
      <fileset dir="${demo.dock.dir}/*.class"/>
    </delete>

    <javac srcdir="${demo.dock.dir}"
           destdir="${demo.dock.dir}"
           classpath="${dist.dir}/${jar.file}"
           target="1.4"
           source="1.4"
    />

    <mkdir dir="${dist.dir}/demo" />

    <jar destfile="${dist.dir}/demo/dockdemo.jar" update="false">
         <fileset dir="${demo.dock.dir}" includes="*.class"/>
    </jar>

    <!-- Copy demo apps to a "demo" directory under the distribution directory -->
    <copy todir="${dist.dir}/demo">
      <fileset dir="${demo.dir}" casesensitive="false" >
        <include name="README"/>
      </fileset>
    </copy>
  </target>


</project>
