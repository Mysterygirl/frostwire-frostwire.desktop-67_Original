/**
 * Adapted from the Json parser grammar from http://code.google.com/p/jsonparser/
 *
 * Author: Inderjeet Singh
 */

options {
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(JsonParserJavacc)

package com.google.gson;
import java.io.EOFException;

@SuppressWarnings("all")
final class JsonParserJavacc {

}

PARSER_END(JsonParserJavacc)

SKIP : { " " | "\t" | "\n" | "\r" }
/*
 * Technically Json does not allow leading zeros in numbers, but we
 * will allow that.
 */
TOKEN : {
  <EXPONENT : ("e"|"E")["+","-","0"-"9"](["0"-"9"])*>
  | <DIGITS : (["0"-"9"])+>
  | <NULL : "null">  
  | <NAN : "NaN">
  | <INFINITY : "Infinity">
  | <BOOLEAN : ("true" | "false")>
  | <IDENTIFIER_SANS_EXPONENT : ["a"-"d","f"-"z","A"-"D","F"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | <IDENTIFIER_STARTS_WITH_EXPONENT : ["e","E"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | <#HEX_CHAR : ["a"-"f","A"-"F","0"-"9"]>
  | <UNICODE_CHAR : "\\u" <HEX_CHAR><HEX_CHAR><HEX_CHAR><HEX_CHAR> >
  | <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\"", "/"] >
  | <SINGLE_QUOTE_LITERAL: "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPE_CHAR> | <UNICODE_CHAR>)* "\'" >
  | <DOUBLE_QUOTE_LITERAL: "\"" ( (~["\"","\\","\n","\r"]) | <ESCAPE_CHAR> | <UNICODE_CHAR>)* "\"" >
  | <QUOTE : "\""> : STRING_STATE
}
<STRING_STATE> MORE  : { "\\" : ESC_STATE }
<STRING_STATE> TOKEN : {
  <ENDQUOTE : <QUOTE> > : DEFAULT
| <CHAR : ~["\"","\\"]>
}
<ESC_STATE> TOKEN : {
  <CNTRL_ESC : ["\"","\\","/","b","f","n","r","t"]> : STRING_STATE
}
<ESC_STATE> MORE  : { "u" : HEX_STATE }
<HEX_STATE>  TOKEN : {
  <#HEX : ["a"-"f","A"-"F","0"-"9"]>
| <HEX_ESC : <HEX><HEX><HEX><HEX> > : STRING_STATE
}

public JsonElement parse() :
{
  JsonElement json = null;
}
{
  (<EOF>){
    throw new JsonParseException(new EOFException());
  } |
  [")]}'\n"]( json=JsonObject() |
    json=JsonArray() |
    json=JsonPrimitive() |
    json=JsonNull())
  { return json; }
}

private JsonObject JsonObject() :
{
  JsonObject o = new JsonObject();
}
{
  "{" [ Members(o) ] "}"
  { return o; }
}

private JsonNull JsonNull() :
{
  Token t;
}
{
  t = <NULL> { return JsonNull.createJsonNull(); }
}

private void Members(JsonObject o) :
{ }
{
  Pair(o) [ "," Members(o) ]
}

private void Pair(JsonObject o) :
{
  JsonPrimitive property;
  JsonElement value;
}
{
  property=JsonMemberName() ":" value=JsonValue()
  {
    o.add(property.getAsString(), value);
  }
}

private JsonPrimitive JsonMemberName() : 
{ Token t; JsonPrimitive value; }
{
  t= Identifier() { return new JsonPrimitive(t.image); } |
  value=JsonString() { return value; }
}

private JsonArray JsonArray() :
{ JsonArray array = new JsonArray(); }
{
  "[" (
  array=JsonArrayEmpty(array) {return array;} | 
  JsonArrayElement(array) (JsonArrayNextElement(array))* "]" {return array; } )  
}

private JsonArray JsonArrayEmpty(JsonArray array) :
{ }
{
  "]" { return array; }  
}

private JsonArray JsonArrayElement(JsonArray array) :
{ JsonElement element = null; }
{
  element=JsonValue() {array.add(element);} 
  { return array; }
}

private JsonArray JsonArrayNextElement(JsonArray array) :
{ JsonElement element = null; }
{
  "," element=JsonValue() {array.add(element);} 
  { return array; }
}

private JsonElement JsonValue() :
{ JsonElement o = null; }
{
( o=JsonString() |
  o=JsonNumber() |
  o=JsonObject() |
  o=JsonArray() |
  o=JsonBoolean() |
  o=JsonNull() )
  { return o; }
}

private JsonPrimitive JsonBoolean() :
{ Token t; }
{
  t=<BOOLEAN> {
    boolean value = Boolean.valueOf(t.image);
    return new JsonPrimitive(value);
  }
}

private JsonPrimitive JsonPrimitive() :
{
  JsonPrimitive value;
}
{
  ( value=JsonString()) { return value; } |
  ( value=JsonNumber()) { return value; } |
  ( value=JsonBoolean()) { return value; } 
}

private JsonPrimitive JsonNumber() :
{
  String intpart = null,
         fracpart = null,
         exppart = null;
  JsonPrimitive value;
}
{
  LOOKAHEAD(2)
  (value=JsonSpecialNumbers()) {return value; } |		 
  (intpart=JsonInt() [ fracpart=JsonFrac() ] [ exppart=JsonExp() ])
  {
    Number n;
    if (exppart != null || fracpart != null) {
      fracpart = (fracpart == null) ? "" : fracpart;
      exppart = (exppart == null) ? "" : exppart;
      n = new java.math.BigDecimal(intpart + fracpart + exppart);
    } else {
      n = new java.math.BigInteger(intpart);
    }
    return new JsonPrimitive(n);
  }
}

private JsonPrimitive JsonSpecialNumbers() : 
{
  boolean negative = false;		 
}		 
{		 
  (<NAN>) {return new JsonPrimitive(Double.NaN); } |
  (["-" {negative = true;}]<INFINITY>) {return new JsonPrimitive(negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY); }
}

private String JsonInt() :
{
  String digits;
  boolean negative = false;
}
{
  ["-" { negative = true; } ] digits=Digits()
  {
    if(negative)
      return "-" + digits;
    return digits;
  }
}

private String JsonFrac() :
{ String digits; }
{
  "." digits=Digits()
  { return "." + digits; }
}

private String JsonExp() :
{ Token t; }
{
  t = <EXPONENT> {return t.image;} 
} 

private Token Identifier() :
{ Token t; }
{
  (t = <IDENTIFIER_STARTS_WITH_EXPONENT> | t = <IDENTIFIER_SANS_EXPONENT>) {return t;} 
} 

private String Digits() :
{ Token t; }
{
  t=<DIGITS>
  { return t.image; }
}

private JsonPrimitive JsonString() :
{ Token t; }
{
  (t=<SINGLE_QUOTE_LITERAL> | t=<DOUBLE_QUOTE_LITERAL>) { 
    String value = StringUnmarshaller.unmarshall(t.image);    
    return new JsonPrimitive(value); 
  }
}
