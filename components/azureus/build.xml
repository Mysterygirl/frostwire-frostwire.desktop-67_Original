<?xml version="1.0" encoding="UTF-8"?>
<project name="azureus" default="compile-src" basedir=".">
    <!--
    Cut some time on next integration by deleting folders that are gone. (this could be in a script)
    
    0. rename old src/ folder to src.old/
    1. Unzip src.zip, and move code into src/main/java
    2. ls -lFR src/ | grep ^src > src.ls
    3. ls -lFR src.old/ | grep ^src > srcOld.ls
    4. make sure both files internally show paths the same way (starting with src/)
    5. diff listings, and delete all new folders. 
       diff -u srcOld.ls src.ls | sed 's/\://g' | egrep "^\+s" | sed 's/\+//g' | xargs rm -fr 
      
    
	Hacks done to the azureus code before FrostWire Integration:
        - Alden: Removed UI code and fixed core so it could compile without it.

	- com/aelitis/azureus/core/impl/AzureusCoreImpl.java stopSupport() - 
        Fix NPE, no need to check pluginManager on stop.

        http://frostwire.svn.sourceforge.net/frostwire/?rev=1376&view=rev
        - org/gudy/azureus2/pluginsimpl/local/PluginInitializer.java
	Disabled missing and unnecessary plugin's loads

        http://frostwire.svn.sourceforge.net/frostwire/?rev=1377&view=rev
        - org.gudy.azureus2.core3.security.impl.SESecurityManagerImpl.exit_vm_permitted = true
	Avoids Security Exception on shutdown.

	- org.gudy.azureus2.core3.security.impl.SESecurityManagerImpl.installSecurityManager()
	Make this function return early. Or not invoke it at all for it will consume the Transferable
        objects in your external Drag and Drops.

        - org.gudy.azureus2.core3.config.COConfigurationManager.java
	Comment out java.nio.preferSelect, we deal with that at launch.
	
		- on PluginInitializer disable:
		PluginManagerDefaults.PID_START_STOP_RULES
		PluginManagerDefaults.PID_SHARE_HOSTER
		PluginManagerDefaults.PID_CORE_UPDATE_CHECKER
		PluginManagerDefaults.PID_CORE_PATCH_CHECKER
		PluginManagerDefaults.PID_RSS
		//UpdateManagerImpl.getSingleton( azureus_core );	// initialise the update manager (around 453)
		
	- AzureusRestarterFactory returns null.
		
	- PluginInitializer.VerifiedPluginHolder, comment block //if ( context[2] != PluginInitializer.class ){
		
    -->
    <import file="../common/build-macros.xml" />
    <import file="../common/build.xml"/>

<!--
    <property name="limewire.components.azureus.src" location="${limewire.home}/components/azureus/src/main/java"/>
    <property name="build.limewire.components.azureus.classpath" location="${limewire.home}/components/azureus/build"/>
-->
    <target name="initialize" depends="lw-common.initialize" unless="initialized.azureus">
      <do.setup-properties component="azureus">
        <src-classpath>
          <path refid="build.limewire.components.common.buildpath"/>
        </src-classpath>
      </do.setup-properties>
    </target>

    <target name="compile-src" depends="lw-common.compile-src">
      <do.compile-src component="azureus" encoding="ISO-8859-1"/>
    </target>

    <target name="clean" depends="">
      <!-- this works if we invoke from root folder or components -->
      <do.clean component="azureus"/>

      <!-- these work if we invoke from azureus folder -->
      <delete dir="dist" />
      <delete dir="build" />

    </target>

    <target name="jar" depends="initialize, compile-src">
        <do.jar component="azureus"/>
    </target>
    
    <!-- compresses officedj.jar into a .pack file using tools/pack200.py -->
    <target name="pack200">
      <delete file="azureus.pack" />
      <delete>
	    <fileset dir="${limewire.home}/components/azureus/lib">
	      <include name="*.pack" />
	    </fileset>
      </delete>
      
      <!-- pack the following jars -->
      <exec executable="tools/pack200.py">
	    <!-- azureus.jar if available -->
	    <arg value="${limewire.home}/lib/jars/azureus.jar" />
	    <!-- pass more jars, or folders containing jars if you need to pack more -->
	    <arg value="lib" />
      </exec>
    </target>
</project>
